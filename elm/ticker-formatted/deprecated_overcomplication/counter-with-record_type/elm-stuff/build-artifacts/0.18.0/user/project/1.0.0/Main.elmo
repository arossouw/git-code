var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('countDown'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('hours'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(model.hour)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('minutes'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(model.minute)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('seconds'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(model.second)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(''),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$initialModel = {count: 500};
var _user$project$Main$timeInSeconds = 5;
var _user$project$Main$tCountDown = {
	hour: (_user$project$Main$timeInSeconds / 3600) | 0,
	minute: (A2(_elm_lang$core$Basics_ops['%'], _user$project$Main$timeInSeconds, 3600) / 60) | 0,
	second: A2(_elm_lang$core$Basics_ops['%'], _user$project$Main$timeInSeconds, 60),
	count: _user$project$Main$timeInSeconds
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		return _elm_lang$core$Native_Utils.eq(model.count, 0) ? {ctor: '_Tuple2', _0: _user$project$Main$tCountDown, _1: _elm_lang$core$Platform_Cmd$none} : {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				_user$project$Main$tCountDown,
				{
					count: model.count - 1,
					hour: ((model.count - 1) / 3600) | 0,
					minute: (A2(_elm_lang$core$Basics_ops['%'], model.count - 1, 3600) / 60) | 0,
					second: A2(_elm_lang$core$Basics_ops['%'], model.count - 1, 60)
				}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$Main$Model = function (a) {
	return {count: a};
};
var _user$project$Main$CountDownTimer = F4(
	function (a, b, c, d) {
		return {hour: a, minute: b, second: c, count: d};
	});
var _user$project$Main$Tick = {ctor: 'Tick'};
var _user$project$Main$subscriptions = function (_p1) {
	return A2(
		_elm_lang$core$Time$every,
		_elm_lang$core$Time$second,
		_elm_lang$core$Basics$always(_user$project$Main$Tick));
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: _user$project$Main$tCountDown, _1: _elm_lang$core$Platform_Cmd$none},
		view: _user$project$Main$view,
		update: _user$project$Main$update,
		subscriptions: _user$project$Main$subscriptions
	})();
