!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BYTESWAP	sha1.c	76;"	d	file:
BYTESWAP	sha1.c	81;"	d	file:
BYTESWAP	sha1.c	96;"	d	file:
BYTESWAP64	sha1.c	77;"	d	file:
BYTESWAP64	sha1.c	83;"	d	file:
BYTESWAP64	sha1.c	97;"	d	file:
DEFAULT_MSG_MAX	rteval-parserd.c	44;"	d	file:
DO_ROUND	sha1.c	58;"	d	file:
F_0_19	sha1.c	53;"	d	file:
F_20_39	sha1.c	54;"	d	file:
F_40_59	sha1.c	55;"	d	file:
F_60_79	sha1.c	56;"	d	file:
K_0_19	sha1.c	67;"	d	file:
K_20_39	sha1.c	68;"	d	file:
K_40_59	sha1.c	69;"	d	file:
K_60_79	sha1.c	70;"	d	file:
ROTL	sha1.c	50;"	d	file:
ROTR	sha1.c	51;"	d	file:
SHA1Final	sha1.c	/^SHA1Final (SHA1Context *sc, uint8_t hash[SHA1_HASH_SIZE])$/;"	f
SHA1Guts	sha1.c	/^SHA1Guts (SHA1Context *sc, const uint32_t *cbuf)$/;"	f	file:
SHA1Init	sha1.c	/^SHA1Init (SHA1Context *sc)$/;"	f
SHA1Update	sha1.c	/^SHA1Update (SHA1Context *sc, const void *vdata, uint32_t len)$/;"	f
SHA1_UNROLL	sha1.c	212;"	d	file:
XMLPARSER_XSL	rteval-parserd.c	45;"	d	file:
_BYTESWAP	sha1.c	99;"	d	file:
_BYTESWAP64	sha1.c	101;"	d	file:
__byteswap64	sha1.c	/^static inline uint64_t __byteswap64(uint64_t x)$/;"	f	file:
__malloc__	eurephia_nullsafe.c	43;"	d	file:
__malloc__	eurephia_nullsafe.c	45;"	d	file:
_byteswap	sha1.c	/^static inline uint32_t _byteswap(int littleEndian, uint32_t x)$/;"	f	file:
_byteswap64	sha1.c	/^static inline uint64_t _byteswap64(int littleEndian, uint64_t x)$/;"	f	file:
_byteswap64	sha1.c	/^static inline uint64_t _byteswap64(uint64_t x)$/;"	f	file:
burnStack	sha1.c	/^burnStack (int size)$/;"	f	file:
check_filesize	parsethread.c	/^inline int check_filesize(threadData_t *thrdata, const char *fname) {$/;"	f
close_log	log.c	/^void close_log(LogContext *lctx) {$/;"	f
daemonise	rteval-parserd.c	/^int daemonise(LogContext *log) {$/;"	f
db_begin	pgsql.c	/^int db_begin(dbconn *dbc) {$/;"	f
db_commit	pgsql.c	/^int db_commit(dbconn *dbc) {$/;"	f
db_connect	pgsql.c	/^dbconn *db_connect(eurephiaVALUES *cfg, unsigned int id, LogContext *log) {$/;"	f
db_disconnect	pgsql.c	/^void db_disconnect(dbconn *dbc) {$/;"	f
db_get_new_rterid	pgsql.c	/^int db_get_new_rterid(dbconn *dbc) {$/;"	f
db_get_submissionqueue_job	pgsql.c	/^parseJob_t *db_get_submissionqueue_job(dbconn *dbc, pthread_mutex_t *mtx) {$/;"	f
db_ping	pgsql.c	/^int db_ping(dbconn *dbc) {$/;"	f
db_register_cyclictest	pgsql.c	/^int db_register_cyclictest(dbconn *dbc, xsltStylesheet *xslt, xmlDoc *summaryxml, int rterid) {$/;"	f
db_register_rtevalrun	pgsql.c	/^int db_register_rtevalrun(dbconn *dbc, xsltStylesheet *xslt, xmlDoc *summaryxml,$/;"	f
db_register_system	pgsql.c	/^int db_register_system(dbconn *dbc, xsltStylesheet *xslt, xmlDoc *summaryxml) {$/;"	f
db_rollback	pgsql.c	/^int db_rollback(dbconn *dbc) {$/;"	f
db_update_submissionqueue	pgsql.c	/^int db_update_submissionqueue(dbconn *dbc, unsigned int submid, int status) {$/;"	f
db_wait_notification	pgsql.c	/^int db_wait_notification(dbconn *dbc, const int *shutdown, const char *listenfor) {$/;"	f
default_cfg_values	configparser.c	/^static inline eurephiaVALUES *default_cfg_values(LogContext *log, eurephiaVALUES *prgargs) {$/;"	f	file:
eAdd_value	eurephia_values.c	/^void eAdd_value(eurephiaVALUES *vls, const char *key, const char *val)$/;"	f
eAdd_valuestruct	eurephia_values.c	/^void eAdd_valuestruct(eurephiaVALUES *vls, eurephiaVALUES *newval) {$/;"	f
eCount	eurephia_values.c	/^unsigned int eCount(eurephiaVALUES *vls) {$/;"	f
eCreate_value_space	eurephia_values.c	/^eurephiaVALUES *eCreate_value_space(LogContext *log, int evgid)$/;"	f
eFree_values_func	eurephia_values.c	/^void eFree_values_func(eurephiaVALUES *vls) {$/;"	f
eGet_value	eurephia_values.c	/^char *eGet_value(eurephiaVALUES *vls, const char *key)$/;"	f
eGet_valuestruct	eurephia_values.c	/^eurephiaVALUES *eGet_valuestruct(eurephiaVALUES *vls, const char *key)$/;"	f
eRemove_value	eurephia_values.c	/^eurephiaVALUES *eRemove_value(eurephiaVALUES *vls, unsigned int evgid, unsigned int evid) {$/;"	f
eUpdate_value	eurephia_values.c	/^void eUpdate_value(eurephiaVALUES *vls, const char *key, const char *newval, const int addunkn) {$/;"	f
eUpdate_valuestruct	eurephia_values.c	/^eurephiaVALUES *eUpdate_valuestruct(eurephiaVALUES *vls, eurephiaVALUES *newval, const int addunkn) {$/;"	f
encapsInt	xmlparser.c	/^static char *encapsInt(const unsigned int val) {$/;"	f	file:
encapsString	xmlparser.c	/^static char *encapsString(const char *str) {$/;"	f	file:
get_destination_path	parsethread.c	/^static char *get_destination_path(LogContext *log, const char *destdir,$/;"	f	file:
get_mqueue_msg_max	rteval-parserd.c	/^unsigned int get_mqueue_msg_max(LogContext *log) {$/;"	f
init_log	log.c	/^LogContext *init_log(const char *logdest, const char *loglvl) {$/;"	f
logctx	rteval-parserd.c	/^static LogContext *logctx = NULL;     \/**<  Initialsed log context, to be used by sigcatch() *\/$/;"	v	file:
main	rteval-parserd.c	/^int main(int argc, char **argv) {$/;"	f
main	sha1.c	/^main (int argc, char *argv[])$/;"	f
make_report_dir	parsethread.c	/^static int make_report_dir(LogContext *log, const char *fname) {$/;"	f	file:
malloc_nullsafe	eurephia_nullsafe.c	/^__malloc__ void *malloc_nullsafe(LogContext *log, size_t sz) {$/;"	f
padding	sha1.c	/^static const uint8_t padding[64] = {$/;"	v	file:
parseToSQLdata	xmlparser.c	/^xmlDoc *parseToSQLdata(LogContext *log, xsltStylesheet *xslt, xmlDoc *indata_d, parseParams *params) {$/;"	f
parse_arguments	argparser.c	/^eurephiaVALUES *parse_arguments(int argc, char **argv) {$/;"	f
parse_config_line	configparser.c	/^static inline eurephiaVALUES *parse_config_line(LogContext *log, const char *line) {$/;"	f	file:
parse_report	parsethread.c	/^inline int parse_report(threadData_t *thrdata, parseJob_t *job)$/;"	f
parsethread	parsethread.c	/^void *parsethread(void *thrargs) {$/;"	f
pgsql_INSERT	pgsql.c	/^eurephiaVALUES *pgsql_INSERT(dbconn *dbc, xmlDoc *sqldoc) {$/;"	f
prio_level	log.c	/^	const int prio_level;$/;"	m	struct:__anon1	file:
priority_str	log.c	/^	const char *priority_str;$/;"	m	struct:__anon1	file:
process_submission_queue	rteval-parserd.c	/^int process_submission_queue(dbconn *dbc, mqd_t msgq, int *activethreads) {$/;"	f
rcsid	sha1.c	/^static const char rcsid[] =$/;"	v	file:
read_config	configparser.c	/^eurephiaVALUES *read_config(LogContext *log, eurephiaVALUES *prgargs, const char *section) {$/;"	f
setEndian	sha1.c	/^static inline void setEndian(int *littleEndianp)$/;"	f	file:
shutdown	rteval-parserd.c	/^static int shutdown = 0;              \/**<  Variable indicating if the program should shutdown *\/$/;"	v	file:
sigcatch	rteval-parserd.c	/^void sigcatch(int sig) {$/;"	f
sqldataExtractContent	xmlparser.c	/^char *sqldataExtractContent(LogContext *log, xmlNode *sql_n) {$/;"	f
sqldataGetFid	xmlparser.c	/^int sqldataGetFid(LogContext *log, xmlNode *sql_n, const char *fname) {$/;"	f
sqldataGetHostInfo	xmlparser.c	/^xmlDoc *sqldataGetHostInfo(LogContext *log, xsltStylesheet *xslt, xmlDoc *summaryxml,$/;"	f
sqldataGetRequiredSchemaVer	xmlparser.c	/^int sqldataGetRequiredSchemaVer(LogContext *log, xmlNode *sqldata_root)$/;"	f
sqldataGetValue	xmlparser.c	/^char *sqldataGetValue(LogContext *log, xmlDoc *sqld, const char *fname, int recid ) {$/;"	f
sqldataValueHash	xmlparser.c	/^static inline char *sqldataValueHash(LogContext *log, xmlNode *sql_n) {$/;"	f	file:
syslog_prio_map	log.c	/^} syslog_prio_map[] = {$/;"	v	typeref:struct:__anon1	file:
usage	argparser.c	/^void usage() {$/;"	f
writelog	log.c	/^void writelog(LogContext *lctx, unsigned int loglvl, const char *fmt, ... ) {$/;"	f
xmlExtractContent	eurephia_xml.c	/^inline char *xmlExtractContent(xmlNode *n) {$/;"	f
xmlFindNode	eurephia_xml.c	/^xmlNode *xmlFindNode(xmlNode *node, const char *key) {$/;"	f
xmlGetAttrValue	eurephia_xml.c	/^char *xmlGetAttrValue(xmlAttr *attr, const char *key) {$/;"	f
xmlGetNodeContent	eurephia_xml.c	/^inline char *xmlGetNodeContent(xmlNode *node, const char *key) {$/;"	f
xmlNodeToString	eurephia_xml.c	/^char *xmlNodeToString(LogContext *log, xmlNode *node) {$/;"	f
